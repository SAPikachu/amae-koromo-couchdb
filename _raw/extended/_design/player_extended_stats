{
  "_id": "_design/player_extended_stats",
  "_rev": "5-11d90c493a5cdc09ee1469dcf682ef69",
  "views": {
    "player_stats": {
      "map": "function(doc) {\n  \"use strict\";\n  if (doc.type !== \"roundData\") {\n    return;\n  }\n  var 役满倍数 = {\n    \"35\": 1,\n    \"36\": 1,\n    \"37\": 1,\n    \"38\": 1,\n    \"39\": 1,\n    \"40\": 1,\n    \"41\": 1,\n    \"42\": 1,\n    \"43\": 1,\n    \"44\": 1,\n    \"45\": 1,\n    \"46\": 1,\n    \"47\": 2,\n    \"48\": 2,\n    \"49\": 2,\n    \"50\": 2\n  };\n  var getFan = function(fans) {\n    if (!役满倍数[fans[0]]) {\n      return {\n        scoring: Math.min(fans.length, 13),\n        actual: fans.length\n      };\n    }\n    var fan = 0;\n    var dedup = {};\n    fans.forEach(function(x) {\n      if (dedup[x]) {\n        return;\n      }\n      dedup[x] = true;\n      fan += (役满倍数[x] || 0) * 13;\n    });\n    return {\n      scoring: fan\n    };\n  };\n  doc.accounts.forEach(function(accountId, seat) {\n    var data = {\n      count: 0,\n    };\n\n    function inc(key, val) {\n      if (val === 0) {\n        return;\n      }\n      val = val || 1;\n      if (!data[key]) {\n        data[key] = val;\n      } else {\n        data[key] += val;\n      }\n    }\n    var 最大连庄 = 0;\n    doc.data.forEach(function(round, index) {\n      data.count++;\n      var player = round[seat];\n      if (player.和) {\n        inc(\"和\");\n        inc(\"和了点数\", player.和[0] / 100);\n        inc(\"和了巡数\", player.和[2]);\n        if (player.自摸) {\n          inc(\"自摸\");\n        }\n        if (player.立直) {\n          inc(\"立直和了\");\n        }\n        if (player.副露) {\n          inc(\"副露和了\");\n        }\n        if (!player.副露 && !player.立直) {\n          inc(\"默听\");\n        }\n        if (player.和[1].indexOf(30) > -1) {\n          inc(\"一发\");\n        }\n        if (player.和[1].indexOf(33) > -1) {\n          inc(\"里宝\");\n        }\n        var fan = getFan(player.和[1]);\n        data.最大累计番数 = Math.max(data.最大累计番数 || 0, fan.actual || 0);\n        if (fan.scoring >= 13) {\n          inc(\"役满\");\n          if (fan.actual) {\n            inc(\"累计役满\");\n          }\n        }\n      }\n      if (player.放铳) {\n        inc(\"放铳\");\n        inc(\"放铳点数\", player.放铳 / 100);\n        if (player.立直) {\n          inc(\"放铳时立直\");\n        }\n        if (player.副露) {\n          inc(\"放铳时副露\");\n        }\n        round.forEach(function(x) {\n          if (!x.和) {\n            return;\n          };\n          if (x.立直) {\n            inc(\"放铳至立直\");\n          }\n          if (x.副露) {\n            inc(\"放铳至副露\");\n          }\n          if (!x.副露 && !x.立直) {\n            inc(\"放铳至默听\");\n          }\n          var fanNew = getFan(x.和[1]);\n          if (fanNew.scoring <= 5) {\n            return;\n          }\n          if (data.最近大铳) {\n            var fanExisting = getFan(data.最近大铳[1]);\n            if (fanExisting.scoring > fanNew.scoring) {\n              return;\n            }\n          }\n          data.最近大铳 = x.和.concat([doc.game._id, doc.start_time]);\n        });\n      }\n      if (player.立直) {\n        inc(\"立直\");\n        inc(\"立直巡目\", player.立直);\n        inc(\"振听立直\", player.振听立直 ? 1 : 0);\n        if (player.立直听牌 && player.立直听牌.length) {\n          inc(\"立听分母\", 1);\n          inc(\"立听面数\", player.立直听牌.length);\n          inc(\"立听好型\", player.立直听牌.length > 1 ? 1 : 0);\n        }\n        if (\"立直听牌残枚\" in player) {\n          inc(\"立残分母\", 1);\n          inc(\"立直听牌残枚\", player.立直听牌残枚);\n          inc(\"立听好型2\", player.立直听牌残枚 >= 6 ? 1 : 0);\n        }\n        if (player.和) {\n          inc(\"立直收入\", player.和[0] / 100);\n        } else if (player.放铳 || player.包牌) {\n          var mod = 1000;\n          round.filter(function(x) {\n            return x.和;\n          }).forEach(function(x) {\n            if (Math.abs(x.和[2] - player.立直 - (1 / doc.accounts.length)) < 0.01) {\n              mod = 0;\n            }\n          });\n          if (!mod) {\n            inc(\"立直瞬间放铳\");\n          }\n          inc(\"立直支出\", ((player.放铳 || player.包牌) + mod) / 100);\n        } else if (player.流听 && !round.filter(function(x) {\n            return x.流满;\n          }).length) {\n          var 流听玩家数 = round.filter(function(x) {\n            return x.流听;\n          }).length;\n          inc(\"立直流局收支\", ([undefined, 3000, 1500, 1000, 0][流听玩家数] - 1000) / 100);\n        } else {\n          inc(\"立直其它收支\", -1000 / 100);\n        }\n        var 立直玩家 = round.filter(function(x) {\n          return x.立直;\n        }).sort(function(a, b) {\n          return a.立直 - b.立直;\n        });\n        var 立直Index = 立直玩家.indexOf(player);\n        if (立直Index === 0) {\n          inc(\"先制立直\");\n        }\n        if (立直Index > 0) {\n          inc(\"追立\");\n        }\n        if (立直Index + 1 < 立直玩家.length) {\n          inc(\"被追立\");\n        }\n      }\n      inc(\"起手向听\", player.起手向听);\n      inc(\"W立直\", player.W立直 ? 1 : 0);\n      inc(\"流满\", player.流满 ? 1 : 0);\n      inc(\"副露\", player.副露 ? 1 : 0);\n      if (\"流听\" in player) {\n        inc(\"流局\");\n        inc(\"流局听牌\", player.流听 ? 1 : 0);\n        if (player.立直) {\n          inc(\"立直流局\");\n        }\n        if (player.副露) {\n          inc(\"副露流局\");\n        }\n      }\n      var 自摸玩家 = round.filter(function(x) {\n        return x.自摸;\n      });\n      if (!player.和 && 自摸玩家.length) {\n        inc(\"被自摸\");\n        if (player.亲 && 自摸玩家[0].和[0] >= 8000) {\n          inc(\"被炸\");\n          inc(\"被炸点数\", 自摸玩家[0].和[0] / 100);\n        }\n      }\n      if (player.亲 && index > 0 && doc.data[index - 1][seat].亲) {\n        最大连庄++;\n        data.最大连庄 = Math.max(data.最大连庄 || 0, 最大连庄);\n      } else {\n        最大连庄 = 0;\n      }\n    });\n    if (doc.mode_id !== 0) {\n      emit([accountId, 0, doc.start_time], data);\n    }\n    emit([accountId, doc.mode_id, doc.start_time], data);\n  });\n}",
      "reduce": "function (keys, values, rereduce) {\n\tvar 役满倍数 = {\n\t\t\"35\": 1,\n\t\t\"36\": 1,\n\t\t\"37\": 1,\n\t\t\"38\": 1,\n\t\t\"39\": 1,\n\t\t\"40\": 1,\n\t\t\"41\": 1,\n\t\t\"42\": 1,\n\t\t\"43\": 1,\n\t\t\"44\": 1,\n\t\t\"45\": 1,\n\t\t\"46\": 1,\n\t\t\"47\": 2,\n\t\t\"48\": 2,\n\t\t\"49\": 2,\n\t\t\"50\": 2\n\t};\n\tvar getFan = function(fans) {\n\t\tif (!役满倍数[fans[0]]) {\n\t\t\treturn { scoring: Math.min(fans.length, 13), actual: fans.length };\n\t\t}\n\t\tvar fan = 0;\n\t\tvar dedup = {};\n\t\tfans.forEach(function(x) {\n\t\t\tif (dedup[x]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdedup[x] = true;\n\t\t\tfan += (役满倍数[x] || 0) * 13;\n\t\t});\n\t\treturn { scoring: fan };\n\t};\n\tvar result = { };\n\tvalues.forEach(function(x) {\n\t\tObject.keys(x).forEach(function(key) {\n\t\t\tif (!(key in result)) {\n\t\t\t\tresult[key] = 0;\n\t\t\t}\n\t\t\tif (key.indexOf(\"最大\") === 0 || key === \"latest_timestamp\") {\n\t\t\t\tresult[key] = Math.max(result[key], x[key]);\n\t\t\t} else if (key === \"最近大铳\") {\n\t\t\t\tif (result[key]) {\n\t\t\t\t\tvar fanExisting = getFan(result[key][1]);\n\t\t\t\t\tvar fanNew = getFan(x[key][1]);\n\t\t\t\t\tif (fanExisting.scoring > fanNew.scoring) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (fanExisting.scoring === fanNew.scoring && result[key][4] > x[key][4]) {\n\t\t\t\t\t\t// Older\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult[key] = x[key];\n\t\t\t} else {\n\t\t\t\tresult[key] += x[key];\n\t\t\t}\n\t\t});\n\t});\n  return result;\n}"
    }
  }
}