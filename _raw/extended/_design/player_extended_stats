{
  "_id": "_design/player_extended_stats",
  "_rev": "2-a945e58176f05231bb086dc9b895ea9a",
  "views": {
    "player_stats": {
      "map": "function (doc) {\n\t\"use strict\";\n  if (doc.type !== \"roundData\") {\n    return;\n  }\n\tvar 役满倍数 = {\n\t\t\"35\": 1,\n\t\t\"36\": 1,\n\t\t\"37\": 1,\n\t\t\"38\": 1,\n\t\t\"39\": 1,\n\t\t\"40\": 1,\n\t\t\"41\": 1,\n\t\t\"42\": 1,\n\t\t\"43\": 1,\n\t\t\"44\": 1,\n\t\t\"45\": 1,\n\t\t\"46\": 1,\n\t\t\"47\": 2,\n\t\t\"48\": 2,\n\t\t\"49\": 2,\n\t\t\"50\": 2\n\t};\n\tvar getFan = function(fans) {\n\t\tif (!役满倍数[fans[0]]) {\n\t\t\treturn { scoring: Math.min(fans.length, 13), actual: fans.length };\n\t\t}\n\t\tvar fan = 0;\n\t\tvar dedup = {};\n\t\tfans.forEach(function(x) {\n\t\t\tif (dedup[x]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdedup[x] = true;\n\t\t\tfan += (役满倍数[x] || 0) * 13;\n\t\t});\n\t\treturn { scoring: fan };\n\t};\n  doc.accounts.forEach(function(accountId, seat) {\n\t\tvar data = {\n\t\t\tcount: 0,\n\t\t};\n\t\tfunction inc(key, val) {\n\t\t\tif (val === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tval = val || 1;\n\t\t\tif (!data[key]) {\n\t\t\t\tdata[key] = val;\n\t\t\t} else {\n\t\t\t\tdata[key] += val;\n\t\t\t}\n\t\t}\n\t\tvar 最大连庄 = 0;\n\t\tdoc.data.forEach(function(round, index) {\n\t\t\tdata.count++;\n\t\t\tvar player = round[seat];\n\t\t\tif (player.和) {\n\t\t\t\tinc(\"和\");\n\t\t\t\tinc(\"和了点数\", player.和[0] / 100);\n\t\t\t\tinc(\"和了巡数\", player.和[2]);\n\t\t\t\tif (player.自摸) {\n\t\t\t\t\tinc(\"自摸\");\n\t\t\t\t}\n\t\t\t\tif (player.立直) {\n\t\t\t\t\tinc(\"立直和了\");\n\t\t\t\t}\n\t\t\t\tif (player.副露) {\n\t\t\t\t\tinc(\"副露和了\");\n\t\t\t\t}\n\t\t\t\tif (!player.副露 && !player.立直) {\n\t\t\t\t\tinc(\"默听\");\n\t\t\t\t}\n\t\t\t\tif (player.和[1].indexOf(30) > -1) {\n\t\t\t\t\tinc(\"一发\");\n\t\t\t\t}\n\t\t\t\tif (player.和[1].indexOf(33) > -1) {\n\t\t\t\t\tinc(\"里宝\");\n\t\t\t\t}\n\t\t\t\tvar fan = getFan(player.和[1]);\n\t\t\t\tdata.最大累计番数 = Math.max(data.最大累计番数 || 0, fan.actual || 0);\n\t\t\t\tif (fan.scoring >= 13) {\n\t\t\t\t\tinc(\"役满\");\n\t\t\t\t\tif (fan.actual) {\n\t\t\t\t\t\tinc(\"累计役满\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (player.放铳) {\n\t\t\t\tinc(\"放铳\");\n\t\t\t\tinc(\"放铳点数\", player.放铳 / 100);\n\t\t\t\tif (player.立直) {\n\t\t\t\t\tinc(\"放铳时立直\");\n\t\t\t\t}\n\t\t\t\tif (player.副露) {\n\t\t\t\t\tinc(\"放铳时副露\");\n\t\t\t\t}\n\t\t\t\tround.forEach(function(x) {\n\t\t\t\t\tif (!x.和) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t};\n\t\t\t\t\tif (x.立直) {\n\t\t\t\t\t\tinc(\"放铳至立直\");\n\t\t\t\t\t}\n\t\t\t\t\tif (x.副露) {\n\t\t\t\t\t\tinc(\"放铳至副露\");\n\t\t\t\t\t}\n\t\t\t\t\tif (!x.副露 && !x.立直) {\n\t\t\t\t\t\tinc(\"放铳至默听\");\n\t\t\t\t\t}\n\t\t\t\t\tvar fanNew = getFan(x.和[1]);\n\t\t\t\t\tif (fanNew.scoring <= 5) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (data.最近大铳) {\n\t\t\t\t\t\tvar fanExisting = getFan(data.最近大铳[1]);\n\t\t\t\t\t\tif (fanExisting.scoring > fanNew.scoring) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdata.最近大铳 = x.和.concat([doc.game._id, doc.start_time]);\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (player.立直) {\n\t\t\t\tinc(\"立直\");\n\t\t\t\tinc(\"立直巡目\", player.立直);\n\t\t\t\tinc(\"振听立直\", player.振听立直 ? 1 : 0);\n\t\t\t\tif (player.和) {\n\t\t\t\t\tinc(\"立直收入\", player.和[0] / 100);\n\t\t\t\t} else if (player.放铳 || player.包牌) {\n\t\t\t\t\tvar mod = 1000;\n\t\t\t\t\tround.filter(function(x) { return x.和; }).forEach(function(x) {\n\t\t\t\t\t\tif (Math.abs(x.和[2] - player.立直 - (1 / doc.accounts.length)) < 0.01) {\n\t\t\t\t\t\t\tmod = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif (!mod) {\n\t\t\t\t\t\tinc(\"立直瞬间放铳\");\n\t\t\t\t\t}\n\t\t\t\t\tinc(\"立直支出\", ((player.放铳 || player.包牌) + mod) / 100);\n\t\t\t\t} else if (player.流听 && !round.filter(function(x) { return x.流满; }).length) {\n\t\t\t\t\tvar 流听玩家数 = round.filter(function(x) { return x.流听; }).length;\n\t\t\t\t\tinc(\"立直流局收支\", ([undefined, 3000, 1500, 1000, 0][流听玩家数] - 1000) / 100);\n\t\t\t\t} else {\n\t\t\t\t\tinc(\"立直其它收支\", -1000 / 100);\n\t\t\t\t}\n\t\t\t\tvar 立直玩家 = round.filter(function(x) { return x.立直; }).sort(function(a, b) { return a.立直 - b.立直; });\n\t\t\t\tvar 立直Index = 立直玩家.indexOf(player);\n\t\t\t\tif (立直Index === 0) {\n\t\t\t\t\tinc(\"先制立直\");\n\t\t\t\t}\n\t\t\t\tif (立直Index > 0) {\n\t\t\t\t\tinc(\"追立\");\n\t\t\t\t}\n\t\t\t\tif (立直Index + 1 < 立直玩家.length) {\n\t\t\t\t\tinc(\"被追立\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tinc(\"起手向听\", player.起手向听);\n\t\t\tinc(\"W立直\", player.W立直 ? 1 : 0);\n\t\t\tinc(\"流满\", player.流满 ? 1 : 0);\n\t\t\tinc(\"副露\", player.副露 ? 1 : 0);\n\t\t\tif (\"流听\" in player) {\n\t\t\t\tinc(\"流局\");\n\t\t\t\tinc(\"流局听牌\", player.流听 ? 1 : 0);\n\t\t\t\tif (player.立直) {\n\t\t\t\t\tinc(\"立直流局\");\n\t\t\t\t}\n\t\t\t\tif (player.副露) {\n\t\t\t\t\tinc(\"副露流局\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar 自摸玩家 = round.filter(function(x) { return x.自摸; });\n\t\t\tif (!player.和 && 自摸玩家.length) {\n\t\t\t\tinc(\"被自摸\");\n\t\t\t\tif (player.亲 && 自摸玩家[0].和[0] >= 8000) {\n\t\t\t\t\tinc(\"被炸\");\n\t\t\t\t\tinc(\"被炸点数\", 自摸玩家[0].和[0] / 100);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (player.亲 && index > 0 && doc.data[index - 1][seat].亲) {\n\t\t\t\t最大连庄++;\n\t\t\t\tdata.最大连庄 = Math.max(data.最大连庄 || 0, 最大连庄);\n\t\t\t} else {\n\t\t\t\t最大连庄 = 0;\n\t\t\t}\n\t\t});\n\t\temit([accountId, 0, doc.start_time], data);\n\t\temit([accountId, doc.mode_id, doc.start_time], data);\n\t});\n}",
      "reduce": "function (keys, values, rereduce) {\n\tvar 役满倍数 = {\n\t\t\"35\": 1,\n\t\t\"36\": 1,\n\t\t\"37\": 1,\n\t\t\"38\": 1,\n\t\t\"39\": 1,\n\t\t\"40\": 1,\n\t\t\"41\": 1,\n\t\t\"42\": 1,\n\t\t\"43\": 1,\n\t\t\"44\": 1,\n\t\t\"45\": 1,\n\t\t\"46\": 1,\n\t\t\"47\": 2,\n\t\t\"48\": 2,\n\t\t\"49\": 2,\n\t\t\"50\": 2\n\t};\n\tvar getFan = function(fans) {\n\t\tif (!役满倍数[fans[0]]) {\n\t\t\treturn { scoring: Math.min(fans.length, 13), actual: fans.length };\n\t\t}\n\t\tvar fan = 0;\n\t\tvar dedup = {};\n\t\tfans.forEach(function(x) {\n\t\t\tif (dedup[x]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdedup[x] = true;\n\t\t\tfan += (役满倍数[x] || 0) * 13;\n\t\t});\n\t\treturn { scoring: fan };\n\t};\n\tvar result = { };\n\tvalues.forEach(function(x) {\n\t\tObject.keys(x).forEach(function(key) {\n\t\t\tif (!(key in result)) {\n\t\t\t\tresult[key] = 0;\n\t\t\t}\n\t\t\tif (key.indexOf(\"最大\") === 0 || key === \"latest_timestamp\") {\n\t\t\t\tresult[key] = Math.max(result[key], x[key]);\n\t\t\t} else if (key === \"最近大铳\") {\n\t\t\t\tif (result[key]) {\n\t\t\t\t\tvar fanExisting = getFan(result[key][1]);\n\t\t\t\t\tvar fanNew = getFan(x[key][1]);\n\t\t\t\t\tif (fanExisting.scoring > fanNew.scoring) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (fanExisting.scoring === fanNew.scoring && result[key][4] > x[key][4]) {\n\t\t\t\t\t\t// Older\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult[key] = x[key];\n\t\t\t} else {\n\t\t\t\tresult[key] += x[key];\n\t\t\t}\n\t\t});\n\t});\n  return result;\n}"
    }
  }
}